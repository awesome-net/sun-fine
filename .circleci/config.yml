version: 2.1
executors:
  default_executor:
    working_directory: ~/work_dir
    docker:
    - image: circleci/php:7.1-node-browsers
      environment:
      # レンタルサーバーのユーザ名など PRODUCTION_USER: awe-some
      # レンタルサーバーのホスト名など　PRODUCTION_HOST: awe-some.sakura.ne.jp
      # レンタルサーバーのユーザ名など STAGING_USER: awe-some
      # レンタルサーバーのホスト名など　STAGING_HOST: awe-some.sakura.ne.jp
      # 本番環境用のディレクトリ　PRODUCTION_DIR: /home/awe-some/www/circle-prod
      # ステージング環境用のディレクトリ　STAGING_DIR: /home/awe-some/www/circle-stag

commands:
  attach_common_workspace:
    description: 各ジョブでworkspaceを共有する
    steps:
    - attach_workspace:
        at: .
  prepare_composer:
    description: composer環境を整える
    steps:
    - run: |
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('https://composer.github.io/installer.sig'))) { echo 'Installer verified'; } else { echo 'Installer invalid'; unlink('composer-setup.php'); } echo PHP_EOL;"
        php composer-setup.php
        php -r "unlink('composer-setup.php');"
    # キャッシュを復元
    - restore_cache:
        keys:
        - dependency-cache-{{ checksum "composer.json" }}
        # 最新のキャッシュを使う
        - dependency-cache-
    # composerで依存パッケージのインストール
    - run: php composer.phar install
    # キャッシュを保存
    - save_cache:
        paths:
        - ./vendor
        key: dependency-cache-{{ checksum "composer.json" }}
  prepare_npm:
    description: npm環境を整える
    steps:
    # npmパッケージのキャッシュを復元する
    - restore_cache:
        key: dependency-cache-{{ checksum "package.json" }}
    - run:
        name: npm パッケージをインストールする
        command: npm install
    # npmパッケージのキャッシュを保存する
    - save_cache:
        key: dependency-cache-{{ checksum "package.json" }}
        paths:
        - node_modules
  prepare_scp:
    description: npm環境を整える
    steps:
    - add_ssh_keys:
        fingerprints:
        - "a8:eb:7e:01:04:50:b9:30:12:a6:bd:8a:23:d1:cc:98"
    - run:
        name: scpコマンド追加、更新
        command: sudo apt install -y openssh-client
  remove_unnecessary_files:
    description: 不要なファイルを削除
    steps:
    - run:
        name: 不要なファイルを削除
        command: |
          rm -fr ~/work_dir/.gitignore
          rm -fr ~/work_dir/node_modules
          rm -fr ~/work_dir/vendor
          rm -fr ~/work_dir/src
          rm ~/work_dir/README.md

jobs:
  # -----------
  # workspace内のphp,npm実行環境作成
  # -----------
  build:
    executor: default_executor
    steps:
    - checkout
    - prepare_composer
    - prepare_npm
    - persist_to_workspace:
        root: .
        paths:
        - .
  # -----------
  # コーディング規約チェック
  # -----------
  code_check:
    executor: default_executor
    steps:
    - attach_common_workspace
    - run:
        name: コーディング規約のパスを設定
        command: vendor/bin/phpcs --config-set installed_paths vendor/wp-coding-standards/wpcs
#    - run:
#        name: phpcsを実行する
#        command: vendor/bin/phpcs --ignore=*vendor/*

  deploy_staging:
    executor: default_executor
    steps:
    - attach_common_workspace
    - remove_unnecessary_files
    - prepare_scp
    - run:
        name: ホストをknown_hostsに追加
        command: ssh-keyscan -p 22 ${STAGING_HOST} >> ~/.ssh/known_hosts
    - deploy:
        name: ステージング環境へのデプロイ
        command: scp -r ~/work_dir/* ${STAGING_USER}@${STAGING_HOST}:${STAGING_DIR:-/home/awe-some/www/test/staging}

  deploy_production:
    executor: default_executor
    steps:
    - attach_common_workspace
    - remove_unnecessary_files
    - prepare_scp
    - run:
        name: ホストをknown_hostsに追加
        command: ssh-keyscan -p 22 ${PRODUCTION_HOST} >> ~/.ssh/known_hosts
    - deploy:
        name: 本番環境へのデプロイ
        command: scp -r ~/work_dir/* ${PRODUCTION_USER}@${PRODUCTION_HOST}:${PRODUCTION_DIR:-/home/awe-some/www/test/production}

workflows:
  version: 2
  deploy_with_code_check:
    jobs:
    - build

    - code_check:
        requires:
        - build

    - deploy_staging:
        requires:
        - code_check
        filters:
          branches:
            only: staging

    - deploy_production:
        requires:
        - code_check
        filters:
          branches:
            only: master
